# -*- coding: utf-8 -*-
"""Untitled9.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/14ef0fU0K3nbmX8nx88-3nXu8PyjwN4_s
"""

import streamlit as st
import zipfile
import io
import requests
import re
import random

# ✅ Dropbox直リンク（整形済み）
DROPBOX_URL = "https://www.dropbox.com/scl/fi/i50xzf0isskjrle7yrcof/mp3-10.zip?rlkey=7ke725jn53j7qb0k6cfiptvtx&st=4uv4cp2y&raw=1"

# 🎯 説明欄（画面上部に表示）
def show_description():
    st.title("🎵 Internet検定　楽曲編")
    st.markdown("""
    このクイズでは、音声を聞いて正しい答えを入力してください。
    200問以上の中からランダムに全50問、難易度は「☆1」〜「☆4」で構成されています。
    難易度は本当に適当です。得点調整目的です。
    ヒントとして、答えの**最初の1文字**が表示されます

    - 音声は1回のみ再生されます（再読み込みでリセット）
    - 答えはひらがな、アルファベットの小文字で入力してください
    - 表示されている記号も入力してください。半角全角は不問。
    - 正解するとスコアが加算されます
    - 全問終了後にスコアが表示されます

    🎯 目指せ全問正解！
    """)

# 🔍 難易度抽出（例: "god knows　☆3.mp3" → "☆3"）
def extract_difficulty(filename: str) -> str:
    match = re.search(r'☆[1-4]', filename)
    return match.group() if match else "☆?"

# 🧠 答え抽出（例: "god knows　☆3.mp3" → "god knows"）
def extract_answer(filename: str) -> str:
    base = filename.split('/')[-1].replace('.mp3', '')
    answer = re.split(r'☆[1-4]', base)[0].strip()
    return answer

# 💡 ヒント抽出（答えの最初の1文字）
def extract_hint(filename: str) -> str:
    answer = extract_answer(filename)
    return answer[0] if answer else ""

# 🎧 ZIPから音声データを抽出
def load_audio(zip_file, filename):
    with zip_file.open(filename) as f:
        return f.read()

# 📦 DropboxからZIPを取得してクイズデータを生成
@st.cache_data
def load_quiz_data():
    response = requests.get(DROPBOX_URL)
    zip_bytes = io.BytesIO(response.content)
    zip_file = zipfile.ZipFile(zip_bytes)

    quiz_list = []
    for name in zip_file.namelist():
        if name.endswith('.mp3'):
            quiz_list.append({
                "filename": name,
                "answer": extract_answer(name),
                "hint": extract_hint(name),
                "difficulty": extract_difficulty(name),
                "audio": load_audio(zip_file, name)
            })

    random.shuffle(quiz_list)
    return quiz_list

# ✍️ 正規化（全角・半角・空白・大小文字を吸収）
def normalize(text: str) -> str:
    return re.sub(r'\s+', '', text.strip().lower())

# 🚀 Streamlitアプリ本体
def main():
    show_description()
    quiz_data = load_quiz_data()

    if "index" not in st.session_state:
        st.session_state.index = 0
        st.session_state.score = 0
        st.session_state.answered = set()

    if st.session_state.index >= len(quiz_data):
        st.success("全問終了！お疲れさまでした。")
        st.write(f"スコア: {st.session_state.score} / {len(quiz_data)}")
        return

    current = quiz_data[st.session_state.index]

    if current["filename"] in st.session_state.answered:
        st.session_state.index += 1
        st.experimental_rerun()

    st.audio(current["audio"], format="audio/mp3")
    st.markdown(f"**難易度**: {current['difficulty']}")
    st.markdown(f"**ヒント**: {current['hint']}")

    user_input = st.text_input("答えを入力してください", key=f"input_{st.session_state.index}")

    if st.button("答える", key=f"btn_{st.session_state.index}"):
        st.session_state.answered.add(current["filename"])
        if normalize(user_input) == normalize(current["answer"]):
            st.success("正解！")
            st.session_state.score += 1
        else:
            st.error(f"不正解… 正解は「{current['answer']}」でした")
        st.session_state.index += 1
        st.experimental_rerun()

if __name__ == "__main__":
    main()